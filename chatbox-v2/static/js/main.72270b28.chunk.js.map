{"version":3,"sources":["Constants.tsx","Utils.ts","ClientId.ts","Badges.tsx","Content.tsx","Pronouns.tsx","Message.tsx","Chat.tsx","App.tsx","Configurator.tsx","index.tsx"],"names":["TwitchDefaultColors","fetchTwitch","path","a","fetch","headers","response","json","fetchJSON","createSrcSet","urls","map","str","i","join","Badges","props","configContext","useContext","ConfigContext","badgeContext","BadgesContext","showBadges","badges","badgeElements","split","badge","badgeData","get","push","className","alt","srcSet","src","Content","text","rawEmotes","emotes","isMe","test","replace","trim","emote","emoteId","indicies","start","end","id","Math","max","min","length","channelEmotes","EmotesContext","idx","nextIdx","indexOf","name","slice","sort","x","y","index","content","key","substr","elements","item","Pronouns","pronounsContext","PronounsContext","showPronouns","display","pronouns","userMap","nick","displayMap","pronoun","fetchPronouns","Message","config","message","rawNick","prefix","blockedUsers","includes","toLowerCase","hideCommands","params","startsWith","tags","color","showUserColours","charCodeAt","style","React","createContext","Map","Chat","state","connected","messages","pronounUsers","pronounDisplay","this","load","previousProps","channelName","setState","errorMessage","undefined","webSocket","close","data","users","channelId","_id","socket","WebSocket","addEventListener","onSocketOpen","bind","onSocketClose","onSocketMessage","encodedId","encodeURIComponent","Promise","all","loadBadges","loadEmotes","loadPronouns","badgeSets","badgeName","badgeSet","set","badge_sets","badgeVersion","versions","image_url_1x","image_url_2x","image_url_4x","console","log","bttvEmotes","emoteSet","Array","isArray","concat","sharedEmotes","images","code","e","pronounsJson","value","userName","has","pending","pronoun_id","ev","sendIrc","floor","random","ircMessage","parse","command","oldState","Error","send","fontColor","fill","fontFamily","fontName","fontSize","fontWeight","filter","webkitTextStroke","stroke","strokeWidth","dropShadow","dropShadowOffset","dropShadowBlur","dropShadowColour","outline","outlineThickness","outlineColour","height","viewBox","width","xmlns","xmlnsXlink","d","Provider","m","Component","App","decode","Buffer","from","window","location","hash","substring","Checkbox","type","checked","onChange","label","Configurator","chatConfig","target","newValue","preventDefault","onSubmit","href","placeholder","onChannelNameChange","onBlur","updateChat","flex","size","onValueChange","isNaN","marginTop","marginBottom","readOnly","btoa","String","fromCharCode","MsgPack","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.72270b28.chunk.js","sourcesContent":["export const TwitchDefaultColors = [\"#FF0000\", \"#0000FF\", \"#008000\", \"#B22222\", \"#FF7F50\", \"#9ACD32\", \"#FF4500\", \"#2E8B57\", \"#DAA520\", \"#D2691E\", \"#5F9EA0\", \"#1E90FF\", \"#FF69B4\", \"#8A2BE2\", \"#00FF7F\"];\r\n","import { ClientId } from \"./ClientId\";\r\n\r\nexport const fetchTwitch = async (path: string) => {\r\n  let response = await fetch(path, { headers: { \"Client-ID\": ClientId } });\r\n  return await response.json();\r\n}\r\n\r\nexport const fetchJSON = async (path: string) => {\r\n  let response = await fetch(path);\r\n  return await response.json();\r\n}\r\n\r\nexport const createSrcSet = (urls: string[]) => urls.map((str, i) => i === 0 ? `${str} ` : `${str} ${i + 1}x`).join(', ');\r\n","export const ClientId = 'p31p8buadkrrel3fdzq7268cq6q7li';","import { BadgesContext, ConfigContext } from \"./Chat\";\r\nimport React, { useContext } from 'react';\r\nimport { createSrcSet } from \"./Utils\";\r\n\r\ninterface BadgesProps {\r\n  badges?: string\r\n}\r\n\r\nexport const Badges = (props: BadgesProps) => {\r\n  const configContext = useContext(ConfigContext);\r\n  const badgeContext = useContext(BadgesContext);\r\n\r\n  if(!configContext?.showBadges) return null;\r\n\r\n  let badges = props.badges ?? \"\";\r\n  let badgeElements: Array<any> = [];\r\n  for (const badge of badges.split(',')) {\r\n    let badgeData = badgeContext.get(badge);\r\n    if (!badgeData) continue;\r\n\r\n    badgeElements.push(<img className=\"badge\" alt={\"\"} key={badge} srcSet={createSrcSet(badgeData)} src={badgeData[0]} />)\r\n  }\r\n\r\n  return (\r\n    <>{badgeElements}</>\r\n  )\r\n}","import React, { useContext } from 'react';\r\nimport { EmotesContext } from './Chat';\r\nimport { Emote, TwitchEmote } from './Types';\r\nimport { createSrcSet } from './Utils';\r\n\r\ninterface ContentProps {\r\n  text: string;\r\n  emotes: string;\r\n}\r\n\r\n\r\nexport const Content = (props: ContentProps) => {\r\n  let text = props.text;\r\n  let rawEmotes = props.emotes ?? \"\"\r\n\r\n  // this has to be done before you parse emotes\r\n  let isMe = false;\r\n  if (/^\\x01ACTION.*\\x01$/.test(text)) {\r\n    isMe = true;\r\n    text = text.replace(/^\\x01ACTION/, '').replace(/\\x01$/, '').trim();\r\n  }\r\n\r\n  // emotes appear as <emoteid>:<start>-<end>,<start>-<end>/ (e.g. 302347771:16-26,33-43)\r\n  let emotes: Array<TwitchEmote> = [];\r\n  for (const emote of rawEmotes.split('/')) {\r\n    if (!emote) continue;\r\n\r\n    const [emoteId, indicies] = emote.split(':');\r\n    for (const indexSet of indicies.split(',')) {\r\n      const [start, end] = indexSet.split('-');\r\n      emotes.push({\r\n        id: emoteId,\r\n        urls: [\r\n          `https://static-cdn.jtvnw.net/emoticons/v2/${emoteId}/default/dark/1.0`,\r\n          `https://static-cdn.jtvnw.net/emoticons/v2/${emoteId}/default/dark/2.0`,\r\n          `https://static-cdn.jtvnw.net/emoticons/v2/${emoteId}/default/dark/3.0`,\r\n        ],\r\n        start: Math.max(+start, 0),\r\n        end: Math.min(+end + 1, text.length)\r\n      });\r\n    }\r\n  }\r\n\r\n  let channelEmotes = useContext(EmotesContext);\r\n  let idx = -1;\r\n  let nextIdx = 0;\r\n  do {\r\n    nextIdx = text.indexOf(' ', idx + 1);\r\n    if (nextIdx === -1) {\r\n      nextIdx = text.length;\r\n    }\r\n\r\n    let name = text.slice(idx + 1, nextIdx);\r\n    let emote = channelEmotes.get(name);\r\n    if (emote) {      \r\n      emotes.push({\r\n        id: name,\r\n        urls: emote,\r\n        start: Math.max(idx + 1, 0),\r\n        end: Math.min(nextIdx, text.length)\r\n      });\r\n    }\r\n  } while ((idx = text.indexOf(' ', nextIdx)) !== -1);\r\n\r\n  emotes.sort((x, y) => x.start - y.start);\r\n\r\n  let index = 0;\r\n  let content: Array<string | Emote> = [];\r\n  for (const emote of emotes) {\r\n    content.push(text.slice(index, emote.start));\r\n    content.push({\r\n      id: emote.id,\r\n      urls: emote.urls,\r\n      key: `${emote.start}-${emote.end}`\r\n    });\r\n    index = emote.end;\r\n  }\r\n\r\n  content.push(text.substr(index, text.length - index));  \r\n\r\n  let elements: Array<any> = [];\r\n  for (const item of content) {\r\n    if (typeof item === 'string') {\r\n      elements.push(item);\r\n      continue;\r\n    }\r\n\r\n    let emote = item as Emote;\r\n    elements.push(<img className=\"emote\" key={item.key} alt={item.id} srcSet={createSrcSet(emote.urls)} src={emote.urls[0]} />);\r\n  }\r\n\r\n  return (\r\n    <span className={\"message-content \" + (isMe ? \"me\" : \"\")}>{elements}</span>\r\n  );\r\n}","import React, { useContext } from 'react';\r\nimport { ConfigContext, PronounsContext } from './Chat';\r\n\r\ninterface PronounsProps {\r\n    nick: string;\r\n}\r\n\r\nexport const Pronouns = (props: PronounsProps) => {\r\n    const configContext = useContext(ConfigContext);\r\n    const pronounsContext = useContext(PronounsContext);\r\n    if(!configContext?.showPronouns) return null;\r\n\r\n    let display = \"\";\r\n    let pronouns = pronounsContext?.userMap.get(props.nick);\r\n    if (!pronouns) pronounsContext?.fetchPronouns(props.nick);\r\n    else {\r\n        display = pronounsContext?.displayMap.get(pronouns.pronoun) ?? \"\";\r\n    }\r\n\r\n    return (display ? <span className=\"pronouns\">{display}</span> : null);\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { IRCMessage } from \"irc-message-ts\";\r\nimport { TwitchDefaultColors } from './Constants';\r\nimport { Badges } from \"./Badges\"\r\nimport { Content } from \"./Content\"\r\nimport { Pronouns } from './Pronouns';\r\nimport { ConfigContext } from './Chat';\r\n\r\ninterface MessageProps {\r\n  message: IRCMessage;\r\n}\r\n\r\nexport const Message = (props: MessageProps) => {\r\n  const config = useContext(ConfigContext);\r\n\r\n  let message = props.message;\r\n  let rawNick = message.prefix?.split('@')[0].split('!')[0];\r\n\r\n  if (config?.blockedUsers.includes(rawNick!.toLowerCase())) { return null; }\r\n  if (config?.hideCommands && message.params[1].startsWith('!')) { return null; }\r\n\r\n  let nick = message.tags[\"display-name\"] ?? rawNick;\r\n  let color: string = \"inherit\";\r\n\r\n  if (config?.showUserColours) {\r\n    color = message.tags.color ?? TwitchDefaultColors[nick.toLowerCase().charCodeAt(0) % 15];\r\n  }\r\n\r\n  return (\r\n    <p className=\"message\">\r\n      <Badges badges={message.tags.badges} />\r\n      <Pronouns nick={rawNick!} />\r\n      <span className=\"nick\" style={{ color }}>{nick}</span>\r\n      <Content text={message.params[1]} emotes={message.tags.emotes} />\r\n    </p>\r\n  );\r\n}","import React, { Component } from 'react';\nimport { parse, IRCMessage } from \"irc-message-ts\";\nimport { Message } from \"./Message\"\nimport { BTTVEmote, BTTVUser, Configuration } from \"./Types\"\nimport { fetchJSON, fetchTwitch } from \"./Utils\"\nimport ErrorImage from \"./images/error.svg\"\nimport './Chat.css';\n\ninterface ChatState {\n  connected: boolean;\n  messages: Array<IRCMessage>\n  badges: Map<string, string[]>;\n  emotes: Map<string, string[]>;\n\n  pronounDisplay: Map<string, string>;\n  pronounUsers: Map<string, Pronoun>;\n\n  channelId?: string;\n  channelName?: string;\n  webSocket?: WebSocket;\n\n  errorMessage?: string;\n}\n\ninterface Pronoun {\n  pending: boolean;\n  pronoun: string;\n}\n\ninterface Pronouns {\n  displayMap: Map<string, string>;\n  userMap: Map<string, Pronoun>;\n  fetchPronouns: (nick: string) => void;\n}\n\nexport const ConfigContext = React.createContext<Configuration | null>(null);\nexport const BadgesContext = React.createContext<Map<string, string[]>>(new Map());\nexport const EmotesContext = React.createContext<Map<string, string[]>>(new Map());\nexport const PronounsContext = React.createContext<Pronouns | null>(null);\n\nexport class Chat extends Component<Configuration, ChatState> {\n  constructor(props: any) {\n    super(props);\n    let state: ChatState = { connected: false, messages: [], badges: new Map(), emotes: new Map(), pronounUsers: new Map(), pronounDisplay: new Map() };\n    this.state = state;\n  }\n\n  async componentDidMount() {\n    await this.load();\n  }\n\n  async componentDidUpdate(previousProps) {\n    if (this.props.channelName != previousProps.channelName) {\n      await this.load();\n    }\n  }\n\n  async load() {\n    this.setState({ errorMessage: undefined, messages: [] });\n\n    if (!this.props.channelName) {\n      this.setState({ errorMessage: \"No channel specifed!\" });\n      return;\n    }\n\n    if (this.state.webSocket)\n      this.state.webSocket.close();\n\n    let data = await fetchTwitch(`https://api.twitch.tv/v5/users?login=${this.props.channelName}`);\n    if (!data.users?.length) {\n      this.setState({ errorMessage: \"Specified channel doesn't exist!\" });\n      return;\n    }\n\n    this.setState({ channelId: data.users[0]._id, channelName: this.props.channelName });\n\n    let socket = new WebSocket(\"wss://irc-ws.chat.twitch.tv\", 'irc');\n    socket.addEventListener(\"open\", this.onSocketOpen.bind(this));\n    socket.addEventListener(\"close\", this.onSocketClose.bind(this));\n    socket.addEventListener(\"message\", this.onSocketMessage.bind(this));\n    this.setState({ webSocket: socket });\n\n    let encodedId = encodeURIComponent(this.state.channelId!);\n    await Promise.all([this.loadBadges(encodedId), this.loadEmotes(encodedId), this.loadPronouns()]);\n  }\n\n  async loadBadges(encodedId: string) {\n    let badgeSets = await Promise.all([ // TODO: FFZ custom badges\n      fetchTwitch(`https://badges.twitch.tv/v1/badges/global/display`),\n      fetchTwitch(`https://badges.twitch.tv/v1/badges/channels/${encodedId}/display`)\n    ]);\n\n    let badges = new Map<string, string[]>();\n    for (const badgeSet of badgeSets) {\n      let set = badgeSet.badge_sets;\n      for (const badgeName in set) {\n        for (const badgeVersion in set[badgeName].versions) {\n          badges.set(`${badgeName}/${badgeVersion}`, [\n            set[badgeName].versions[badgeVersion].image_url_1x,\n            set[badgeName].versions[badgeVersion].image_url_2x,\n            set[badgeName].versions[badgeVersion].image_url_4x,\n          ]);\n        }\n      }\n    }\n\n    console.log(\"Loaded badges\", badges);\n    this.setState({ badges });\n  }\n\n  async loadEmotes(encodedId: string) {\n    let emotes = new Map<string, string[]>();\n    let bttvEmotes: Array<Array<BTTVEmote> | BTTVUser> = await Promise.all([\n      fetchJSON('https://api.betterttv.net/3/cached/frankerfacez/emotes/global'),\n      fetchJSON(`https://api.betterttv.net/3/cached/frankerfacez/users/twitch/${encodedId}`),\n      fetchJSON('https://api.betterttv.net/3/cached/emotes/global'),\n      fetchJSON(`https://api.betterttv.net/3/cached/users/twitch/${encodedId}`),\n      fetchJSON('https://api.7tv.app/v2/emotes/global'),\n      fetchJSON(`https://api.7tv.app/v2/users/${encodedId}/emotes`),\n    ]);\n\n    for (let emoteSet of bttvEmotes) {\n      if (!Array.isArray(emoteSet)) {\n        if (emoteSet.channelEmotes) {\n          emoteSet = emoteSet.channelEmotes.concat(emoteSet.sharedEmotes);\n        }\n      }\n\n      if (!Array.isArray(emoteSet)) continue;\n\n      for (const emote of emoteSet as Array<BTTVEmote>) {\n        if (emote.images) {\n          emotes.set(emote.code, [emote.images['1x'], emote.images['2x'], emote.images['4x']]);\n          continue;\n        }\n\n        if (emote.code) {\n          emotes.set(emote.code, [\n            `https://cdn.betterttv.net/emote/${emote.id}/1x`,\n            `https://cdn.betterttv.net/emote/${emote.id}/2x`,\n            `https://cdn.betterttv.net/emote/${emote.id}/3x`\n          ]);\n\n          continue;\n        }\n\n        if (emote.urls) {\n          emotes.set(emote.name!, emote.urls.map(e => e[1]));\n          continue;\n        }\n      }\n    }\n\n    console.log(\"Loaded emotes\", emotes);\n    this.setState({ emotes });\n  }\n\n  async loadPronouns() {\n    let pronouns = new Map<string, string>();\n    let pronounsJson = await fetchJSON(\"https://pronouns.alejo.io/api/pronouns\");\n    for (const value of pronounsJson) {\n      pronouns.set(value.name, value.display);\n    }\n\n    this.setState({ pronounDisplay: pronouns });\n  }\n\n  async fetchPronouns(userName: string) {\n    if (this.state.pronounUsers.has(userName)) return;\n    this.state.pronounUsers.set(userName, { pending: true, pronoun: \"\" });\n\n    let json = await fetchJSON(`https://pronouns.alejo.io/api/users/${userName}`);\n    if (!Array.isArray(json)) return;\n\n    this.state.pronounUsers.set(userName, { pending: false, pronoun: json[0]?.pronoun_id });\n    this.setState({ pronounUsers: this.state.pronounUsers });\n  }\n\n  onSocketOpen(ev: Event) {\n    this.sendIrc(`PASS ass`);\n    this.sendIrc(`NICK justinfan${Math.floor(Math.random() * 65536)}`);\n    this.sendIrc(`CAP REQ :twitch.tv/commands twitch.tv/tags`);\n    this.sendIrc(`JOIN #${this.props.channelName}`);\n  }\n\n  onSocketClose(ev: Event) {\n\n  }\n\n  onSocketMessage(ev: MessageEvent<string>) {\n    for (const message of ev.data.split('\\r\\n')) {\n      if (!message) continue;\n      let ircMessage = parse(message)!;\n      if (ircMessage === null) continue;\n\n      let command = ircMessage.command?.toLowerCase();\n      if (!command) continue;\n\n      switch (command) {\n        case \"ping\":\n          this.sendIrc(`PONG ${ircMessage.params[0]}`);\n          continue;\n        // case \"clearchat\":\n        //   this.setState({ messages: [] });\n        //   continue;\n        case \"privmsg\":\n          this.setState(oldState => ({ messages: [...(oldState.messages.length == 50 ? oldState.messages.slice(1, 50) : oldState.messages), ircMessage] }));\n          continue;\n      }\n    }\n  }\n\n  sendIrc(message: string) {\n    if (this.state.webSocket === undefined) throw new Error(\"what the fuck lol\");\n    this.state.webSocket.send(message + '\\r\\n');\n  }\n\n  render() {\n    let style = {\n      color: this.props.fontColor ?? \"white\",\n      fill: this.props.fontColor ?? \"white\",\n      fontFamily: this.props.fontName,\n      fontSize: this.props.fontSize + \"pt\",\n      fontWeight: this.props.fontWeight,\n      filter: \"\",\n      webkitTextStroke: \"\",\n      stroke: \"\",\n      strokeWidth: \"\",\n    }\n\n    if (this.props.dropShadow) {\n      style.filter = style.filter + `drop-shadow(${this.props.dropShadowOffset}px ${this.props.dropShadowOffset}px ${this.props.dropShadowBlur}px ${this.props.dropShadowColour})`\n    }\n\n    if(this.props.outline) {\n      style.webkitTextStroke = `${this.props.outlineThickness}px ${this.props.outlineColour}`\n      style.stroke = this.props.outlineColour!\n      style.strokeWidth = `${this.props.outlineThickness! * 7.5}px`\n    }\n\n    if (this.state.errorMessage) {\n      return (\n        <div className=\"chat-container\" style={style}>\n          <div className=\"chat-error\">\n            <svg height=\"128px\" viewBox=\"0 0 960 960\" width=\"128px\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\">\n              <path d=\"M0,480C0,435.667 5.66667,393.083 17,352.25C28.3333,311.417 44.4167,273.167 65.25,237.5C86.0833,201.833 111.083,169.417 140.25,140.25C169.417,111.083 201.833,86.0834 237.5,65.25C273.167,44.4167 311.417,28.3334 352.25,17C393.083,5.66669 435.667,0 480,0C524,0 566.417,5.75 607.25,17.25C648.083,28.75 686.333,44.9167 722,65.75C757.667,86.5834 790.083,111.583 819.25,140.75C848.417,169.917 873.417,202.333 894.25,238C915.083,273.667 931.25,311.917 942.75,352.75C954.25,393.583 960,436 960,480C960,524.333 954.333,566.917 943,607.75C931.667,648.583 915.583,686.833 894.75,722.5C873.917,758.167 848.917,790.583 819.75,819.75C790.583,848.917 758.167,873.917 722.5,894.75C686.833,915.583 648.583,931.667 607.75,943C566.917,954.333 524.333,960 480,960C435.667,960 393,954.333 352,943C311,931.667 272.75,915.583 237.25,894.75C201.75,873.917 169.417,848.917 140.25,819.75C111.083,790.583 86.0833,758.25 65.25,722.75C44.4167,687.25 28.3333,649 17,608C5.66667,567 0,524.333 0,480ZM896,480C896,441.667 891.083,404.75 881.25,369.25C871.417,333.75 857.417,300.583 839.25,269.75C821.083,238.917 799.417,210.917 774.25,185.75C749.083,160.583 721.083,138.917 690.25,120.75C659.417,102.583 626.25,88.5834 590.75,78.75C555.25,68.9167 518.333,64.0001 480,64C441.667,64.0001 404.75,68.9167 369.25,78.75C333.75,88.5834 300.583,102.5 269.75,120.5C238.917,138.5 210.833,160.167 185.5,185.5C160.167,210.833 138.5,238.917 120.5,269.75C102.5,300.583 88.5833,333.75 78.75,369.25C68.9167,404.75 64,441.667 64,480C64,518.333 68.9167,555.25 78.75,590.75C88.5833,626.25 102.5,659.417 120.5,690.25C138.5,721.083 160.167,749.167 185.5,774.5C210.833,799.833 238.917,821.5 269.75,839.5C300.583,857.5 333.75,871.417 369.25,881.25C404.75,891.083 441.667,896 480,896C518.333,896 555.25,891.083 590.75,881.25C626.25,871.417 659.417,857.417 690.25,839.25C721.083,821.083 749.083,799.417 774.25,774.25C799.417,749.083 821.083,721.083 839.25,690.25C857.417,659.417 871.417,626.25 881.25,590.75C891.083,555.25 896,518.333 896,480ZM448,544L448,288C448,279.333 451.167,271.833 457.5,265.5C463.833,259.167 471.333,256 480,256C488.667,256 496.167,259.167 502.5,265.5C508.833,271.833 512,279.333 512,288L512,544C512,552.667 508.833,560.167 502.5,566.5C496.167,572.833 488.667,576 480,576C471.333,576 463.833,572.833 457.5,566.5C451.167,560.167 448,552.667 448,544ZM432,672C432,658.667 436.667,647.333 446,638C455.333,628.667 466.667,624 480,624C493.333,624 504.667,628.667 514,638C523.333,647.333 528,658.667 528,672C528,685.333 523.333,696.667 514,706C504.667,715.333 493.333,720 480,720C466.667,720 455.333,715.333 446,706C436.667,696.667 432,685.333 432,672Z\" />\n            </svg>\n            <p>{this.state.errorMessage}</p>\n          </div>\n        </div>\n      )\n    }\n    return (\n      <div className=\"chat-container\">\n        <div className=\"chat-root\" style={style}>\n          <ConfigContext.Provider value={this.props}>\n            <BadgesContext.Provider value={this.state.badges}>\n              <EmotesContext.Provider value={this.state.emotes}>\n                <PronounsContext.Provider value={{ userMap: this.state.pronounUsers, displayMap: this.state.pronounDisplay, fetchPronouns: this.fetchPronouns.bind(this) }}>\n                  {this.state.messages.map(m => <Message key={m.tags.id} message={m} />)}\n                </PronounsContext.Provider>\n              </EmotesContext.Provider>\n            </BadgesContext.Provider>\n          </ConfigContext.Provider>\n        </div>\n      </div>\n    )\n  }\n}","\r\nimport React from \"react\";\r\nimport { Chat } from \"./Chat\";\r\nimport { Configurator } from \"./Configurator\";\r\nimport { Configuration } from \"./Types\";\r\nimport { decode } from \"@msgpack/msgpack\"\r\n\r\nexport const App = () => {\r\n  let config: Partial<Configuration> = {};\r\n  try {\r\n    config = decode(Buffer.from(window.location.hash.substring(1), 'base64')) as Configuration\r\n  }\r\n  catch (e) { }\r\n\r\n  return (\r\n    config.channelName !== undefined ? <Chat {...config as Configuration} /> : <Configurator />\r\n  );\r\n};","import React, { ChangeEvent, Component } from 'react';\r\nimport { Chat } from './Chat';\r\nimport { Configuration } from './Types';\r\nimport * as MsgPack from \"@msgpack/msgpack\"\r\nimport \"./config.css\"\r\n\r\ninterface ConfiguratorState {\r\n  config: Configuration;\r\n  chatConfig?: Configuration;\r\n}\r\n\r\n\r\nconst Checkbox = (props: { label: string, value: boolean, onChange: (event: ChangeEvent<HTMLInputElement>) => void }) => {\r\n  return (\r\n    <label className=\"checkbox\">\r\n      <input type=\"checkbox\"\r\n        checked={props.value}\r\n        onChange={props.onChange} />\r\n      <span className=\"checkmark\"></span> {props.label}\r\n    </label>\r\n  )\r\n}\r\n\r\n\r\nexport class Configurator extends Component<{}, ConfiguratorState> {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      config: {\r\n        channelName: \"\",\r\n        fontName: \"Segoe UI\",\r\n        fontSize: 15,\r\n        fontWeight: 400,\r\n        fontColor: \"#FFFFFF\",\r\n        showBadges: true,\r\n        showPronouns: true,\r\n        showUserColours: true,\r\n\r\n        dropShadow: true,\r\n        dropShadowBlur: 1,\r\n        dropShadowOffset: 1,\r\n        dropShadowColour: \"#000000\",\r\n\r\n        outline: false,\r\n        outlineThickness: 1,\r\n        outlineColour: \"#000000\",\r\n\r\n        hideCommands: true,\r\n        blockedUsers: ['streamelements', 'streamlabs', 'nightbot', 'moobot', 'fossabot']\r\n      }\r\n    };\r\n    this.state = { ...this.state, chatConfig: this.state.config }\r\n  }\r\n\r\n  updateChat() {\r\n    this.setState({ chatConfig: this.state.config });\r\n  }\r\n\r\n  onChannelNameChange(e) {\r\n    this.setState({ config: { ...this.state.config, channelName: e.target.value } });\r\n  }\r\n\r\n  onValueChange<T>(name: string, newValue: T) {\r\n    this.setState({ config: { ...this.state.config, [name]: newValue }, chatConfig: { ...this.state.config, [name]: newValue } });\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"config-root\">\r\n        <div className=\"config-pane\">\r\n          <div className=\"config-main\">\r\n            <h1>Wam's Chat Thing</h1>\r\n\r\n            <form onSubmit={this.onSubmit.bind(this)} className=\"config-input\">\r\n              <h4>A simple, easy to use chat box that supports <a href=\"http://betterttv.net/\">BetterTTV</a>,&nbsp;\r\n                <a href=\"https://frankerfacez.com/\">FrankerFaceZ</a> and&nbsp;\r\n                <a href=\"https://7tv.app/\">7tv</a> emotes!</h4>\r\n\r\n              <div className=\"form-group\">\r\n                <label className=\"form-label\">\r\n                  Channel Name\r\n                  <input type=\"text\"\r\n                    className=\"config-input-text\"\r\n                    placeholder=\"wamwoowam\"\r\n                    value={this.state.config.channelName}\r\n                    onChange={this.onChannelNameChange.bind(this)}\r\n                    onBlur={this.updateChat.bind(this)} />\r\n                </label>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label className=\"form-label\" style={{ flex: 3 }}>\r\n                  Font\r\n                  <input type=\"text\"\r\n                    className=\"config-input-text\"\r\n                    placeholder=\"Font Name\"\r\n                    size={1}\r\n                    value={this.state.config.fontName}\r\n                    onChange={(e) => this.onValueChange(\"fontName\", e.target.value)} />\r\n                </label>\r\n\r\n                <label className=\"form-label\">\r\n                  &nbsp;\r\n                  <input type=\"text\"\r\n                    className=\"config-input-text\"\r\n                    placeholder=\"Font Size\"\r\n                    size={1}\r\n                    value={this.state.config.fontSize}\r\n                    onChange={(e) => this.onValueChange(\"fontSize\", isNaN(+e.target.value) ? this.state.config.fontSize : +e.target.value)} />\r\n                </label>\r\n\r\n                <label className=\"form-label\">\r\n                  &nbsp;\r\n                  <select className=\"config-input-text\"\r\n                    value={this.state.config.fontWeight}\r\n                    onChange={(e) => this.onValueChange(\"fontWeight\", +e.target.value)}>\r\n                    <option value=\"100\">Thin</option>\r\n                    <option value=\"200\">Light</option>\r\n                    <option value=\"300\">Semilight</option>\r\n                    <option value=\"400\">Regular</option>\r\n                    <option value=\"500\">Semibold</option>\r\n                    <option value=\"600\">Bold</option>\r\n                    <option value=\"700\">Extra Bold</option>\r\n                    <option value=\"800\">Black</option>\r\n                    <option value=\"900\">Ultra Black</option>\r\n                  </select>\r\n                </label>\r\n\r\n\r\n                <label className=\"form-label\">\r\n                  &nbsp;\r\n                  <input type=\"color\"\r\n                    className=\"config-input-text\"\r\n                    size={1}\r\n                    value={this.state.config.fontColor}\r\n                    onChange={(e) => this.onValueChange(\"fontColor\", e.target.value)} />\r\n                </label>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label className=\"form-label\">\r\n                  Blocked users (one per line)\r\n                  <textarea className=\"config-input-text\"\r\n                    value={this.state.config.blockedUsers.join('\\n')}\r\n                    onChange={(e) => this.onValueChange(\"blockedUsers\", e.target.value.split('\\n'))} />\r\n                </label>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <Checkbox label=\"Show badges\" value={this.state.config.showBadges} onChange={(e) => this.onValueChange(\"showBadges\", e.target.checked)} />\r\n                <Checkbox label=\"Show pronouns\" value={this.state.config.showPronouns} onChange={(e) => this.onValueChange(\"showPronouns\", e.target.checked)} />\r\n                <Checkbox label=\"Show user colours\" value={this.state.config.showUserColours} onChange={(e) => this.onValueChange(\"showUserColours\", e.target.checked)} />\r\n                <Checkbox label=\"Hide commands\" value={this.state.config.hideCommands} onChange={(e) => this.onValueChange(\"hideCommands\", e.target.checked)} />\r\n                <Checkbox label=\"Drop shadow\" value={this.state.config.dropShadow} onChange={(e) => this.onValueChange(\"dropShadow\", e.target.checked)} />\r\n                <Checkbox label=\"Outline\" value={this.state.config.outline} onChange={(e) => this.onValueChange(\"outline\", e.target.checked)} />\r\n              </div>\r\n\r\n              {this.state.config.dropShadow ? (\r\n                <>\r\n                  <h4 style={{ marginTop: \"1em\", marginBottom: \"-0.5em\" }}>Shadow Options</h4>\r\n\r\n                  <div className=\"form-group\">\r\n                    <label className=\"form-label\">\r\n                      Offset\r\n                      <input type=\"text\"\r\n                        className=\"config-input-text\"\r\n                        placeholder=\"Shadow Offset\"\r\n                        size={1}\r\n                        value={this.state.config.dropShadowOffset}\r\n                        onChange={(e) => this.onValueChange(\"dropShadowOffset\", isNaN(+e.target.value) ? this.state.config.dropShadowOffset : +e.target.value)} />\r\n                    </label>\r\n\r\n                    <label className=\"form-label\">\r\n                      Blur Radius\r\n                      <input type=\"text\"\r\n                        className=\"config-input-text\"\r\n                        placeholder=\"Shadow Blur Radius\"\r\n                        size={1}\r\n                        value={this.state.config.dropShadowBlur}\r\n                        onChange={(e) => this.onValueChange(\"dropShadowBlur\", isNaN(+e.target.value) ? this.state.config.dropShadowBlur : +e.target.value)} />\r\n                    </label>\r\n\r\n                    <label className=\"form-label\">\r\n                      Colour\r\n                      <input type=\"color\"\r\n                        className=\"config-input-text\"\r\n                        size={1}\r\n                        value={this.state.config.dropShadowColour}\r\n                        onChange={(e) => this.onValueChange(\"dropShadowColour\", e.target.value)} />\r\n                    </label>\r\n                  </div>\r\n                </>\r\n              ) : null}\r\n\r\n\r\n              {this.state.config.outline ? (\r\n                <>\r\n                  <h4 style={{ marginTop: \"1em\", marginBottom: \"-0.5em\" }}>Outline Options</h4>\r\n\r\n                  <div className=\"form-group\">\r\n                    <label className=\"form-label\">\r\n                      Thickness\r\n                      <input type=\"text\"\r\n                        className=\"config-input-text\"\r\n                        placeholder=\"Outline Thickness\"\r\n                        size={1}\r\n                        value={this.state.config.outlineThickness}\r\n                        onChange={(e) => this.onValueChange(\"outlineThickness\", isNaN(+e.target.value) ? this.state.config.outlineThickness : +e.target.value)} />\r\n                    </label>\r\n\r\n                    <label className=\"form-label\">\r\n                      Colour\r\n                      <input type=\"color\"\r\n                        className=\"config-input-text\"\r\n                        size={1}\r\n                        value={this.state.config.outlineColour}\r\n                        onChange={(e) => this.onValueChange(\"outlineColour\", e.target.value)} />\r\n                    </label>\r\n                  </div>\r\n                </>\r\n              ) : null}\r\n            </form>\r\n\r\n            <div className=\"config-footer\">\r\n              <p>Paste this into a browser source!</p>\r\n              <input className=\"config-input-text\" readOnly={true} value={`${window.location.href}#${btoa(String.fromCharCode(...MsgPack.encode(this.state.config)))}`} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"config-example\">\r\n          <Chat {...this.state.chatConfig!} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}